//++`shaders/shading/defines.glsl`

out vec3 outColor;

in vec2 TexCoords;

uniform bool fixed_kernel;
uniform bool horizontal;
uniform sampler2D colorTex;
uniform sampler2D horizontalTex;

const float weight[] = {
    0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216
};

const float weights[] = {
    1.0, 
    0.39099131515943186, 0.304504342420284, 
    0.2688318247165084, 0.22756122669152126, 0.1380228609502245, 
    0.21610594100794114, 0.19071282356963737, 0.13107487896736597, 0.07015932695902607, 
    0.18631524637462044, 0.16858500647034522, 0.12489084452697706, 0.07575012632301532, 0.03761639949235221, 
    0.16683050047405476, 0.15349147015096878, 0.11953927714835563, 0.07880514840098747, 0.04397604247537524, 0.020772811587285438, 
    0.15284265059690583, 0.14230610312208586, 0.11485778133701453, 0.08036283530534685, 0.048742523514129735, 0.025628235144021384, 0.011681196278948813, 
    0.14214005255089007, 0.13352822211530005, 0.11069878423244384, 0.08098896064984798, 0.05229040310050089, 0.029794173584922007, 0.01498145131804646, 0.0066479787234937655, 
    0.13357122034787947, 0.12635296066150858, 0.1069554720857897, 0.08101504039622084, 0.054912770343056964, 0.03330627882282267, 0.01807689893804027, 0.008779439778980491, 0.0038155287996407016, 
    0.12647984122429223, 0.12031134657872519, 0.10355293565474837, 0.08064710737726083, 0.05683105603902189, 0.036237081216874946, 0.020906977136818293, 0.01091439911911511, 0.0051555970871359725, 0.0022035791781532758, 
    0.12046434942474676, 0.11511127949839454, 0.1004375028569108, 0.0800189070335353, 0.058211395031252756, 0.038667142848001185, 0.02345280766080079, 0.012988717895786943, 0.00656835187373363, 0.003032949783750346, 0.0012787708054603072, 
    0.11526435770904546, 0.11056035669497283, 0.09756917233196157, 0.07921995728015449, 0.05917869446212026, 0.040672882236661934, 0.025718954595025215, 0.014962717188055077, 0.008008965376604008, 0.003944129429206312, 0.0017870417271048814, 0.0007449498236107108, 
    0.11070260919634597, 0.10652565742802593, 0.09491685098623373, 0.07831142952264156, 0.059827342806859, 0.0423220805160652, 0.027722158099191548, 0.01681433884056057, 0.009443332603364371, 0.004910927351972542, 0.0023648002636450795, 0.001054430969026931, 0.00043534601424046403, 
    0.1066533820917958, 0.10291154890161237, 0.09245545986898958, 0.07733569219476857, 0.06022909764065491, 0.04367286686039983, 0.029484652412623966, 0.018533578788418444, 0.010846797452690326, 0.0059104798063070885, 0.0029986302019700383, 0.00141645261144968, 0.0006229599883733249, 0.0002550922258439781, 
    0.10302436492111411, 0.09964682449363516, 0.09016417539030323, 0.07632232670772375, 0.06043885419839353, 0.04477420442729566, 0.031030342400170087, 0.020118346894489474, 0.012202394214242315, 0.006923805269210563, 0.003675290508800728, 0.0018250952538344937, 0.0008478644631867016, 0.0003684803767577559, 0.00014981294139948864
};
const int part[] = {
    0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105
};

const int ksize = 15;

void main()
{
    //const vec3 Lumia = vec3(0.2126, 0.7152, 0.0722);
    //float L = dot(color, Lumia);
    //int kSize = int(log(L));
    vec3 result;
    int start = part[ksize - 1];
    if(horizontal){
        vec3 color = texture(colorTex, TexCoords).rgb;
        result = color * weights[start];
        for(int i = 1;i < ksize;i++){
            result += textureOffset(colorTex, TexCoords, ivec2(i, 0)).rgb * weights[start + i];
            result += textureOffset(colorTex, TexCoords, ivec2(-i, 0)).rgb * weights[start + i];
        }
    }else{
        result = texture(horizontalTex, TexCoords).rgb * weights[start];
        for(int i = 1;i < ksize;i++){
            result += textureOffset(horizontalTex, TexCoords, ivec2(0, i)).rgb * weights[start + i];
            result += textureOffset(horizontalTex, TexCoords, ivec2(0, -i)).rgb * weights[start + i];
        }
    }
    outColor = result;
}